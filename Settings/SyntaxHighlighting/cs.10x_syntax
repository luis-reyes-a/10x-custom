# Format: <SettingName>: <Settingvalue>
# Setting name must appear at start of line and there must be whitespace after the colon.
# Setting name must appear at start of line and there must be whitespace after the colon.
#
# Valid settings for colour rules:
# REGEX()   A regular expression. Colours entire match or first group.
# WORD()	Matches a word (case sensitive)
# WORDI()   Matches a word (case insensitive)
# TEXT()	Match any text in the line (case sensitive)
# TEXTI()	Match any text in the line (case insensitive)

#----------------------------------------------
# settings

Extensions:					.cs

BlockCommentStart:			/*

BlockCommentEnd:			*/

#----------------------------------------------
# colour rules

Language.Comment:
REGEX(//.*)

Language.String:
REGEX(@".*?")
REGEX("[^"\\]*(?:\\.[^"\\]*)*")
REGEX('[^'\\]*(?:\\.[^'\\]*)*')

Language.Preprocessor:
REGEX(\s*#\s*[a-zA-Z_]+\w*)

Language.Namespace:
REGEX(namespace\s+([a-zA-Z_]+\w*))
REGEX(using\s+(.*))

Language.Number:
REGEX((0[xX][a-zA-Z0-9]+))
REGEX((0[bB][0-9]+))
REGEX([0-9]+[fd]*[uUlLzZfFdD]*)
REGEX([0-9]+\.[0-9]*[fd]*[fFdD]*)
REGEX([0-9]*\.[0-9]+[fd]*[fFdD]*)

Language.Brace:
TEXT({)
TEXT(})

Language.Bracket:
TEXT(()
TEXT())

Language.SquareBracket:
TEXT([)
TEXT(])

Language.SemiColon:
TEXT(;)

Language.Comma:
TEXT(,)

Language.Enum:
REGEX(enum\s+([a-zA-Z_]+\w*))

Language.Keyword:
WORD(abstract)
WORD(as)
WORD(base)
WORD(bool)
WORD(break)
WORD(byte)
WORD(case)
WORD(catch)
WORD(char)
WORD(checked)
WORD(class)
WORD(const)
WORD(continue)
WORD(decimal)
WORD(default)
WORD(delegate)
WORD(do)
WORD(double)
WORD(else)
WORD(enum)
WORD(event)
WORD(explicit)
WORD(extern)
WORD(false)
WORD(finally)
WORD(fixed)
WORD(float)
WORD(for)
WORD(foreach)
WORD(goto)
WORD(if)
WORD(implicit)
WORD(in)
WORD(int)
WORD(interface)
WORD(internal)
WORD(is)
WORD(lock)
WORD(long)
WORD(namespace)
WORD(new)
WORD(null)
WORD(object)
WORD(operator)
WORD(out)
WORD(override)
WORD(params)
WORD(private)
WORD(protected)
WORD(public)
WORD(readonly)
WORD(ref)
WORD(return)
WORD(sbyte)
WORD(sealed)
WORD(short)
WORD(sizeof)
WORD(stackalloc)
WORD(static)
WORD(string)
WORD(struct)
WORD(switch)
WORD(this)
WORD(throw)
WORD(true)
WORD(try)
WORD(typeof)
WORD(uint)
WORD(ulong)
WORD(unchecked)
WORD(unsafe)
WORD(ushort)
WORD(using)
WORD(virtual)
WORD(void)
WORD(volatile)
WORD(while)
WORD(add)
WORD(and)
WORD(alias)
WORD(ascending)
WORD(args)
WORD(async)
WORD(await)
WORD(by)
WORD(descending)
WORD(dynamic)
WORD(equals)
WORD(from)
WORD(get)
WORD(global)
WORD(group)
WORD(init)
WORD(into)
WORD(join)
WORD(let)
WORD(managed)
WORD(nameof)
WORD(nint)
WORD(not)
WORD(notnull)
WORD(nuint)
WORD(on)
WORD(or)
WORD(orderby)
WORD(partial)
WORD(record)
WORD(remove)
WORD(select)
WORD(set)
WORD(unmanaged)
WORD(value)
WORD(var)
WORD(when)
WORD(where)
WORD(with)
WORD(yield)

Language.Operator:
TEXT(.)
TEXT(:)
TEXT(-)
TEXT(>)
TEXT(=)
TEXT(+)
TEXT(-)
TEXT(*)
TEXT(/)
TEXT(%)
TEXT(<)
TEXT(>)
TEXT(.)
TEXT(!)
TEXT(|)
TEXT(&)
TEXT(:)
TEXT(~)
TEXT(?)
TEXT(^)

Language.MemberFunction:
REGEX(\.([a-zA-Z_]+\w*)\()

# treat uppercase functions as preprocessor macros
Language.Preprocessor:
REGEX(\b([A-Z_]+[A-Z0-9_]*)\()

Language.Function:
REGEX(\b([a-zA-Z_]+\w*)\()

Language.Class:
REGEX(::([a-zA-Z_]+\w*))

# treat uppercase variables as preprocessor defines
Language.Preprocessor:
REGEX([^\.]\b[A-Z_]+[A-Z0-9_]+\b)

# member variables often start with mp_ or m or are accessed with .
Language.MemberVariable:
REGEX(\b(?:m_|mp_)\w+\b)
REGEX(\b(?:m)[A-Z]\w+\w*\b)
REGEX(\.([a-zA-Z_]+\w*))

# catch classes such as `MyClass test;` `MyClass test = ' and
# 'foreach (MyClass in' 'MyClass<TemplateArgs>
Language.Class:
REGEX(([a-zA-Z_]+\w*)\s+(?:[a-zA-Z_]+\w*)\s*(?:=|\:|in))
REGEX(([a-zA-Z_]+\w*)<.*?>)

Language.Variable:
REGEX(\b[a-zA-Z_]+\w*\b)

