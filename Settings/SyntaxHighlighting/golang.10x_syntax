# Format: <SettingName>: <Settingvalue>
# Setting name must appear at start of line and there must be whitespace after the colon.
# Setting name must appear at start of line and there must be whitespace after the colon.
#
# Valid settings for colour rules:
# REGEX()   A regular expression. Colours entire match or first group.
# WORD()	Matches a word (case sensitive)
# WORDI()   Matches a word (case insensitive)
# TEXT()	Match any text in the line (case sensitive)
# TEXTI()	Match any text in the line (case insensitive)

#----------------------------------------------
# settings

Extensions: .go

#----------------------------------------------
# colour rules

Language.Comment:
REGEX(//.*)

Language.String:
REGEX([ubrf]?"(?:(?:[^"\\])*(?:\\\")*(?:\\\\)*)*")

Language.Number:
REGEX((0[xX][a-zA-Z0-9]+))
REGEX((0[bB][0-9]+))
REGEX([0-9]+[fd]*[uUlLzZfFdD]*)
REGEX([0-9]+\.[0-9]*[fd]*[uUlLzZfFdD]*)
REGEX([0-9]*\.[0-9]+[fd]*[uUlLzZfFdD]*)

Language.Brace:
TEXT({)
TEXT(})

Language.Bracket:
TEXT(()
TEXT())

Language.SquareBracket:
TEXT([)
TEXT(])

Language.Keyword:
WORD(break)
WORD(case)
WORD(chan)
WORD(const)
WORD(continue)
WORD(default)
WORD(defer)
WORD(else)
WORD(fallthrough)
WORD(for)
WORD(func)
WORD(go)
WORD(goto)
WORD(if)
WORD(import)
WORD(interface)
WORD(map)
WORD(package)
WORD(range)
WORD(return)
WORD(select)
WORD(struct)
WORD(switch)
WORD(type)
WORD(var)

Language.Operator:
TEXT(.)
TEXT(:)
TEXT(-)
TEXT(>)
TEXT(=)
TEXT(+)
TEXT(-)
TEXT(*)
TEXT(/)
TEXT(%)
TEXT(<)
TEXT(>)
TEXT(.)
TEXT(!)
TEXT(|)
TEXT(&)
TEXT(:)
TEXT(~)
TEXT(?)
TEXT(^)

Language.Function:
REGEX(func\s+([a-zA-Z_]+\w*))
REGEX(\b([a-zA-Z_]+\w*)\()

Language.Preprocessor:
REGEX(^\s*package)
REGEX(^\s*import)

Language.Variable:
REGEX(\b[a-zA-Z_]+\w*\b)

