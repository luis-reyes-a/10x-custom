# Format: <SettingName>: <Settingvalue>
# Setting name must appear at start of line and there must be whitespace after the colon.
# Setting name must appear at start of line and there must be whitespace after the colon.
#
# Valid settings for colour rules:
# REGEX()   A regular expression. Colours entire match or first group.
# WORD()	Matches a word (case sensitive)
# WORDI()   Matches a word (case insensitive)
# TEXT()	Match any text in the line (case sensitive)
# TEXTI()	Match any text in the line (case insensitive)

#----------------------------------------------
# settings

Extensions:					.java

BlockCommentStart:			/*

BlockCommentEnd:			*/

#----------------------------------------------
# colour rules

Language.Comment:
REGEX(//.*)

Language.String:
REGEX("[^"\\]*(?:\\.[^"\\]*)*")
REGEX('[^'\\]*(?:\\.[^'\\]*)*')

Language.Namespace:
REGEX(^\s*package\s+(.*))

Language.Number:
REGEX((0[xX|oO][a-zA-Z0-9]+))
REGEX((0[bB][0-9]+))
REGEX([0-9]+[fd]*(?:u8|i8|u16|i16|u32|i32|u64|i64|u128|i128|usize|isize)?)
REGEX([0-9]+\.[0-9]*[fd]*(?:f32|f64)*)
REGEX([0-9]*\.[0-9]+[fd]*(?:f32|f64)*)

Language.Brace:
TEXT({)
TEXT(})

Language.Bracket:
TEXT(()
TEXT())

Language.SquareBracket:
TEXT([)
TEXT(])

Language.SemiColon:
TEXT(;)

Language.Comma:
TEXT(,)

Language.Keyword:
WORD(abstract)
WORD(assert)
WORD(boolean)
WORD(break)
WORD(byte)
WORD(case)
WORD(catch)
WORD(char)
WORD(class)
WORD(continue)
WORD(const)
WORD(default)
WORD(do)
WORD(double)
WORD(else)
WORD(enum)
WORD(exports)
WORD(extends)
WORD(final)
WORD(finally)
WORD(float)
WORD(for)
WORD(goto)
WORD(if)
WORD(implements)
WORD(import)
WORD(instanceof)
WORD(int)
WORD(interface)
WORD(long)
WORD(module)
WORD(native)
WORD(new)
WORD(package)
WORD(private)
WORD(protected)
WORD(public)
WORD(requires)
WORD(return)
WORD(short)
WORD(static)
WORD(strictfp)
WORD(super)
WORD(switch)
WORD(synchronized)
WORD(this)
WORD(throw)
WORD(throws)
WORD(transient)
WORD(try)
WORD(var)
WORD(void)
WORD(volatile)
WORD(while)
WORD(true)
WORD(false)
WORD(null)

Language.Operator:
TEXT(.)
TEXT(:)
TEXT(-)
TEXT(>)
TEXT(=)
TEXT(+)
TEXT(-)
TEXT(*)
TEXT(/)
TEXT(%)
TEXT(<)
TEXT(>)
TEXT(.)
TEXT(!)
TEXT(|)
TEXT(&)
TEXT(:)
TEXT(~)
TEXT(?)
TEXT(^)

Language.MemberFunction:
REGEX(\.([a-zA-Z_]+\w*)\()
REGEX([a-zA-Z_]+\w*::([a-zA-Z_]+\w*)\()

Language.Function:
REGEX(\bfn\s+([a-zA-Z_]+\w*))
REGEX(\b([a-zA-Z_]+\w*)\()

Language.Class:
REGEX(public\s+class\s+([a-zA-Z_]+\w*))
REGEX(::([a-zA-Z_]+\w*))

Language.Variable:
REGEX(\b[a-zA-Z_]+\w*\b)

