# Format: <SettingName>: <Settingvalue>
# Setting name must appear at start of line and there must be whitespace after the colon.
# Setting name must appear at start of line and there must be whitespace after the colon.
#
# Valid settings for colour rules:
# REGEX()   A regular expression. Colours entire match or first group.
# WORD()	Matches a word (case sensitive)
# WORDI()   Matches a word (case insensitive)
# TEXT()	Match any text in the line (case sensitive)
# TEXTI()	Match any text in the line (case insensitive)

#----------------------------------------------
# settings

Extensions:					.rs

BlockCommentStart:			/*

BlockCommentEnd:			*/

#----------------------------------------------
# colour rules

Language.Comment:
REGEX(//.*)

Language.String:
REGEX("[^"\\]*(?:\\.[^"\\]*)*")
REGEX('[^'\\]*(?:\\.[^'\\]*)*')

Language.Namespace:
REGEX(^\s*use\s+(.*))

Language.Number:
REGEX((0[xX|oO][a-zA-Z0-9]+))
REGEX((0[bB][0-9]+))
REGEX([0-9]+[fd]*(?:u8|i8|u16|i16|u32|i32|u64|i64|u128|i128|usize|isize)?)
REGEX([0-9]+\.[0-9]*[fd]*(?:f32|f64)*)
REGEX([0-9]*\.[0-9]+[fd]*(?:f32|f64)*)

Language.Brace:
TEXT({)
TEXT(})

Language.Bracket:
TEXT(()
TEXT())

Language.SquareBracket:
TEXT([)
TEXT(])

Language.SemiColon:
TEXT(;)

Language.Comma:
TEXT(,)

Language.Keyword:
WORD(as)
WORD(break)
WORD(const)
WORD(continue)
WORD(crate)
WORD(else)
WORD(enum)
WORD(extern)
WORD(false)
WORD(fn)
WORD(for)
WORD(if)
WORD(impl)
WORD(in)
WORD(let)
WORD(loop)
WORD(match)
WORD(mod)
WORD(move)
WORD(mut)
WORD(pub)
WORD(ref)
WORD(return)
WORD(self)
WORD(Self)
WORD(static)
WORD(struct)
WORD(super)
WORD(trait)
WORD(true)
WORD(type)
WORD(unsafe)
WORD(use)
WORD(where)
WORD(while)
WORD(abstract)
WORD(become)
WORD(box)
WORD(do)
WORD(final)
WORD(macro)
WORD(override)
WORD(priv)
WORD(typeof)
WORD(unsized)
WORD(virtual)
WORD(yield)
WORD(try)
WORD(union)
WORD(dyn)
WORD('static)

Language.Operator:
TEXT(.)
TEXT(:)
TEXT(-)
TEXT(>)
TEXT(=)
TEXT(+)
TEXT(-)
TEXT(*)
TEXT(/)
TEXT(%)
TEXT(<)
TEXT(>)
TEXT(.)
TEXT(!)
TEXT(|)
TEXT(&)
TEXT(:)
TEXT(~)
TEXT(?)
TEXT(^)

Language.MemberFunction:
REGEX(\.([a-zA-Z_]+\w*)\()
REGEX([a-zA-Z_]+\w*::([a-zA-Z_]+\w*)\()

Language.Function:
REGEX(\bfn\s+([a-zA-Z_]+\w*))
REGEX(\b([a-zA-Z_]+\w*)\()

Language.Class:
REGEX(::([a-zA-Z_]+\w*))

Language.Variable:
REGEX(\b[a-zA-Z_]+\w*\b)

